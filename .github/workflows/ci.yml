name: CI Pipeline

on:
  push:
    branches:
      - main
      - backup-main
      - last-working-backup-amin
      - improve-ci-cd
  pull_request:
    branches:
      - main
      - backup-main
  workflow_dispatch: # Allows manual triggering

jobs:

  lint:
    name: Lint Frontend & Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
      - name: Install Frontend Dependencies
        run: npm install
        working-directory: frontend
      - name: Install Backend Dependencies
        run: npm install
        working-directory: backend
      - name: Run ESLint Fix (Frontend)
        run: npm run lint:fix
        working-directory: frontend
      - name: Run ESLint Fix (Backend)
        run: npm run lint:fix
        working-directory: backend

  backend-test:
    name: Run Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json
      - name: Install Dependencies
        run: npm install
      - name: Load Backend Secrets
        run: |
          echo "MONGO_URI=${{ secrets.BACKEND_MONGO_URI }}" >> $GITHUB_ENV
          echo "MONGO_USER=${{ secrets.BACKEND_MONGO_USER }}" >> $GITHUB_ENV
          echo "MONGO_PASS=${{ secrets.BACKEND_MONGO_PASS }}" >> $GITHUB_ENV
          echo "MONGO_DB_NAME=${{ secrets.BACKEND_MONGO_DB_NAME }}" >> $GITHUB_ENV
          echo "PORT=${{ secrets.BACKEND_PORT }}" >> $GITHUB_ENV
          echo "CLERK_SECRET_KEY=${{ secrets.BACKEND_CLERK_SECRET_KEY }}" >> $GITHUB_ENV
      - name: Run All Backend Tests
        env:
          NODE_ENV: test
        run: npm run test-all

  db-health-check:
    name: 🔍 Health Check MongoDB
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - name: Install MongoDB Shell
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg curl mongodb-org-shell
      - name: Check MongoDB Connection
        run: |
          echo "Checking MongoDB Connection..."
          mongosh "mongodb://${{ secrets.BACKEND_MONGO_USER }}:${{ secrets.BACKEND_MONGO_PASS }}@${{ secrets.BACKEND_MONGO_URI }}/admin?authSource=admin" \
                 --eval "db.runCommand({ ping: 1 })"

  security-check:
    name: 🛡️ Dependency Security Check
    runs-on: ubuntu-latest
    needs: backend-test
    continue-on-error: true # Allows pipeline to continue even if `npm audit` fails
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Install Node.js Dependencies
        run: npm install
        working-directory: backend
      - name: Run Security Audit (Non-Failing)
        run: |
          echo "Running security audit..."
          npm audit --audit-level=high || echo "⚠️ Security vulnerabilities detected, please fix later..."
        working-directory: backend

  create-staging-branch:
    name: Ensure Staging Branch Exists
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Check if Staging Branch Exists
        id: check-staging
        run: |
          git fetch origin
          if git rev-parse --verify origin/staging >/dev/null 2>&1; then
            echo "Staging branch exists."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Staging branch does not exist."
            echo "EXISTS=false" >> $GITHUB_ENV
      - name: Create Staging Branch if Missing
        if: env.EXISTS == 'false'
        run: |
          git checkout -b staging
          git push origin staging

  merge-to-staging:
    name: Auto Merge {Current Branch} → Staging
    needs: [ backend-test, db-health-check, security-check, create-staging-branch ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Merge Current Branch into Staging
        env:
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout staging
          git merge origin/$CURRENT_BRANCH --no-edit
          git push origin staging

  create-production-branch:
    name: Ensure Production Branch Exists
    runs-on: ubuntu-latest
    needs: merge-to-staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Check if Production Branch Exists
        id: check-production
        run: |
          git fetch origin
          if git rev-parse --verify origin/production >/dev/null 2>&1; then
            echo "Production branch exists."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Production branch does not exist."
            echo "EXISTS=false" >> $GITHUB_ENV
      - name: Create Production Branch if Missing
        if: env.EXISTS == 'false'
        run: |
          git checkout -b production
          git push origin production

  approve-production-deploy:
    name: 🚀 **Manual Approval for Production**
    needs: create-production-branch
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Wait for Approval
        run: echo "✅ Approved. Merging staging → production."

  merge-to-production:
    name: Merge Staging → Production
    needs: approve-production-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Merge Staging into Production
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout production
          git merge staging --no-edit
          git push origin production
