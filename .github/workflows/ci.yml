name: CI Pipeline

on:
  push:
    branches:
      - main
      - development
      - pre-staging-2
  pull_request:
    branches:
      - main
      - development
      - pre-staging-2
  workflow_dispatch:

jobs:
  lint:
    name: Lint Frontend & Backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm

      - name: Install Frontend Dependencies
        run: npm install
        working-directory: frontend

      - name: Install Backend Dependencies
        run: npm install
        working-directory: backend

      - name: Run ESLint Fix (Frontend)
        run: npm run lint:fix
        working-directory: frontend

      - name: Run ESLint Fix (Backend)
        run: npm run lint:fix
        working-directory: backend

  backend-test-staging:
    name: Run Backend Tests on Staging/Development
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install Dependencies
        run: npm install

      - name: Load Secrets Based on Branch
        run: |
          if [ "${{ github.ref }}" = "refs/heads/pre-staging-2" ]; then
            echo "Using STAGING secrets (pre-staging branch)."
            echo "MONGO_URI=${{ secrets.STAGING_BACKEND_MONGO_URI }}" >> $GITHUB_ENV
            echo "MONGO_USER=${{ secrets.STAGING_BACKEND_MONGO_USER }}" >> $GITHUB_ENV
            echo "MONGO_PASS=${{ secrets.STAGING_BACKEND_MONGO_PASS }}" >> $GITHUB_ENV
            echo "MONGO_DB_NAME=${{ secrets.STAGING_BACKEND_MONGO_DB_NAME }}" >> $GITHUB_ENV
            echo "PORT=${{ secrets.STAGING_BACKEND_PORT }}" >> $GITHUB_ENV
            echo "CLERK_SECRET_KEY=${{ secrets.STAGING_BACKEND_CLERK_SECRET_KEY }}" >> $GITHUB_ENV
          else
            echo "Using DEVELOPMENT secrets (development branch)."
            echo "MONGO_URI=${{ secrets.DEVELOPMENT_BACKEND_MONGO_URI }}" >> $GITHUB_ENV
            echo "MONGO_USER=${{ secrets.DEVELOPMENT_BACKEND_MONGO_USER }}" >> $GITHUB_ENV
            echo "MONGO_PASS=${{ secrets.DEVELOPMENT_BACKEND_MONGO_PASS }}" >> $GITHUB_ENV
            echo "MONGO_DB_NAME=${{ secrets.DEVELOPMENT_BACKEND_MONGO_DB_NAME }}" >> $GITHUB_ENV
            echo "PORT=${{ secrets.DEVELOPMENT_BACKEND_PORT }}" >> $GITHUB_ENV
            echo "CLERK_SECRET_KEY=${{ secrets.DEVELOPMENT_BACKEND_CLERK_SECRET_KEY }}" >> $GITHUB_ENV
          fi

      - name: Debug Loaded Environment Variables
        run: env | grep MONGO_

      - name: Run All Backend Tests
        env:
          NODE_ENV: test
        run: npm run test-all

  db-health-check-staging:
    name: 🔍 Health Check MongoDB on Staging
    runs-on: ubuntu-latest
    needs: backend-test-staging
    steps:
      - name: Install MongoDB Shell (mongo)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg curl
          # Add MongoDB public key
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo tee /usr/share/keyrings/mongodb-server-key.asc
          # Use the Jammy repo (22.04) if running Ubuntu 24.04+
          UBUNTU_CODENAME=$(lsb_release -cs)
          if [[ "$UBUNTU_CODENAME" == "noble" ]]; then
            UBUNTU_CODENAME="jammy"
          fi
          echo "Using MongoDB repo for: $UBUNTU_CODENAME"
          echo "deb [signed-by=/usr/share/keyrings/mongodb-server-key.asc] https://repo.mongodb.org/apt/ubuntu $UBUNTU_CODENAME/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          echo 'export PATH=/usr/bin:$PATH' >> ~/.bashrc
          source ~/.bashrc

      - name: Check Staging MongoDB Connection
        run: |
          echo "Checking MongoDB Connection on Staging..."
          mongosh --username ${{ secrets.STAGING_BACKEND_MONGO_USER }} \
                --password ${{ secrets.STAGING_BACKEND_MONGO_PASS }} \
                --host ${{ secrets.STAGING_BACKEND_MONGO_URI }} \
                --authenticationDatabase admin \
                --eval "db.runCommand({ ping: 1 })" || echo "MongoDB connection failed on staging."

  security-check:
    name: 🛡️ Dependency Security Check
    runs-on: ubuntu-latest
    needs: backend-test-staging
    continue-on-error: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Node.js Dependencies
        run: npm install
        working-directory: backend

      - name: Run Security Audit (Non-Failing)
        run: |
          echo "Running security audit..."
          npm audit --audit-level=high || echo "⚠️ Security vulnerabilities detected, please fix later..."
        working-directory: backend

  create-staging-branch:
    name: Ensure Staging Branch Exists
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check if Staging Branch Exists
        id: check-staging
        run: |
          git fetch origin
          if git rev-parse --verify origin/staging >/dev/null 2>&1; then
            echo "Staging branch exists."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Staging branch does not exist."
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create Staging Branch if Missing
        if: env.EXISTS == 'false'
        run: |
          git checkout -b staging
          git push origin staging

  merge-to-staging:
    name: Auto Merge Main → Staging
    needs: [ backend-test-staging, db-health-check-staging, security-check, create-staging-branch, lint ]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/pre-staging-2'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Merge Development into Staging
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout staging
          git reset --hard origin/pre-staging-2
          git push --force origin staging

  create-production-branch:
    name: Ensure Production Branch Exists
    runs-on: ubuntu-latest
    needs: merge-to-staging
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Check if Production Branch Exists
        id: check-production
        run: |
          git fetch origin
          if git rev-parse --verify origin/production >/dev/null 2>&1; then
            echo "Production branch exists."
            echo "EXISTS=true" >> $GITHUB_ENV
          else
            echo "Production branch does not exist."
            echo "EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Create Production Branch if Missing
        if: env.EXISTS == 'false'
        run: |
          git checkout -b production
          git push origin production

  approve-production-deploy:
    name: 🚀 **Manual Approval for Production**
    needs: create-production-branch
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Wait for Approval
        run: echo "Approved. Merging staging → production."

  merge-to-production:
    name: Merge Staging → Production
    needs: approve-production-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Merge Staging into Production
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git fetch origin
          git checkout production
          git reset --hard origin/staging
          git push --force origin production

  db-health-check-production:
    name: 🔍 Health Check MongoDB on Production
    runs-on: ubuntu-latest
    needs: merge-to-production
    steps:
      - name: Install MongoDB Shell (mongo)
        run: |
          sudo apt-get update
          sudo apt-get install -y gnupg curl
          # Add MongoDB public key
          curl -fsSL https://pgp.mongodb.com/server-6.0.asc | sudo tee /usr/share/keyrings/mongodb-server-key.asc
          # Handle possible distro differences
          UBUNTU_CODENAME=$(lsb_release -cs)
          if [[ "$UBUNTU_CODENAME" == "noble" ]]; then
            UBUNTU_CODENAME="jammy"
          fi
          echo "Using MongoDB repo for: $UBUNTU_CODENAME"
          echo "deb [signed-by=/usr/share/keyrings/mongodb-server-key.asc] https://repo.mongodb.org/apt/ubuntu $UBUNTU_CODENAME/mongodb-org/6.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-6.0.list
          sudo apt-get update
          sudo apt-get install -y mongodb-org
          echo 'export PATH=/usr/bin:$PATH' >> ~/.bashrc
          source ~/.bashrc

      - name: Check Production MongoDB Connection
        run: |
          echo "Checking MongoDB Connection on Production..."
          mongosh --username ${{ secrets.PRODUCTION_BACKEND_MONGO_USER }} \
                -p ${{ secrets.PRODUCTION_BACKEND_MONGO_PASS }} \
                --host ${{ secrets.PRODUCTION_BACKEND_MONGO_URI }} \
                --authenticationDatabase admin \
                --eval "db.runCommand({ ping: 1 })" || echo "MongoDB connection failed on production."

  backup-production:
    name: Backup & Deploy to Production VM
    runs-on: ubuntu-latest
    needs: db-health-check-production
    if: github.ref == 'refs/heads/pre-staging-2'
    steps:
      - name: Configure SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PRODUCTION_RSA_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      - name: SSH into VM, Deploy Backend
        run: |
          echo "SSHing into VM at ${{ secrets.PRODUCTION_VM_IP }}..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.PRODUCTION_VM_IP }} << EOF
          echo "Checking for Node.js..."
          if ! command -v node &> /dev/null; then
          echo "Node.js not found. Installing Node.js..."
           # This installs Node.js 20.x via NodeSource
           curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
           sudo apt-get install -y nodejs
          else
           echo "Node.js is installed."
          fi

          echo "Deploying the backend..."
          cd code/one-roof/backend
          git pull
          npm install
          npm run prod
          echo "✅ Deployment completed."

      - name: SSH into VM & Backup MongoDB
        run: |
          echo "SSHing into VM at ${{ secrets.PRODUCTION_VM_IP }}..."
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no ubuntu@${{ secrets.PRODUCTION_VM_IP }} << EOF
            echo "Starting MongoDB Backup..."
            TIMESTAMP=\$(date +'%Y-%m-%d_%H-%M-%S')
            mongodump --uri="${{ secrets.PRODUCTION_BACKEND_MONGO_URI }}" \
              --username="${{ secrets.PRODUCTION_BACKEND_MONGO_USER }}" \
              --password="${{ secrets.PRODUCTION_BACKEND_MONGO_PASS }}" \
              --authenticationDatabase=admin \
              --authenticationMechanism=SCRAM-SHA-256 \
              --archive="/home/ubuntu/mongo_backups/backup_${TIMESTAMP}.archive" \

  
      

